"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[61],{1269:e=>{e.exports=class{text="";pronunciation=void 0;from={language:{didYouMean:void 0,iso:""},text:{autoCorrected:void 0,value:"",didYouMean:void 0}};raw=void 0;constructor(e){this.raw=e}}},1977:(e,t,a)=>{let{DEFAULT_OPTIONS:r,TRANSLATE_PATH:o}=a(9681),i=a(1269),{getCode:n}=a(7806);e.exports=function(e,t){t={...r,...t,...e.options};let a={...r.requestOptions,...t.requestOptions};a.method="POST",a.headers["Content-Type"]="application/x-www-form-urlencoded;charset=utf-8";let s=t.forceFrom?t.from:n(t.from);if(null===s)return new Promise(()=>{throw Error(`From language ${t.from} unsupported, bypass this with setting forceFrom to true if you're certain the iso is correct`,{cause:{options:t}})});let l=t.forceTo?t.to:n(t.to);if(null===l)return new Promise(()=>{throw Error(`To language ${t.to} unsupported, bypass this with setting forceTo to true if you're certain the iso is correct`,{cause:{options:t}})});let u={sl:s,tl:l,q:e.text??e};if(0===u.q.length)return new Promise(e=>{let t=new i(u.q);t.from=s,t.to=l,e(t)});a.body=new URLSearchParams(u).toString();let c=o+t.tld+"/translate_a/single?client=at&dt=t&dt=rm&dj=1";return t.requestFunction(c,a).then(e=>{if(e.ok)return e.json();throw Error(e.statusText,{cause:{options:t,url:c,response:e}})}).then(e=>{let a=new i(e);for(let r of(a.from=e.src??t.from,a.to=t.to,e.sentences))void 0!==r.trans?a.text+=r.trans:void 0!==r.translit&&(a.pronunciation=r.translit);return a})}},2189:(e,t,a)=>{let{DEFAULT_OPTIONS:r,TRANSLATE_PATH:o}=a(9681),i=a(1269),{getCode:n}=a(7806);e.exports=function(e,t){t={...r,...t};let a="MkEWBc",s=new URLSearchParams({rpcids:a,"source-path":"/","f.sid":"",bl:"",hl:"en-US","soc-app":1,"soc-platform":1,"soc-device":1,_reqid:Math.floor(1e3+9e3*Math.random()),rt:"c"}),l=o+t.tld+"/_/TranslateWebserverUi/data/batchexecute?"+s.toString(),u={...t.requestOptions,...r.requestOptions};u.method="POST",u.headers["Content-Type"]="application/x-www-form-urlencoded;charset=UTF-8";let c=Array.isArray(e)?e:"object"==typeof e?Object.values(e):[e],h=Array.isArray(e)?[]:"object"==typeof e?{}:void 0,f=[];for(let r=0;r<c.length;r++){let o=c[r].text??c[r],s=c[r].forceFrom??t.forceFrom,l=c[r].from??t.from,u=s?l:n(l);if(null===u)return new Promise(()=>{throw Error(`From language ${l} unsupported, bypass this with setting forceFrom to true if you're certain the iso is correct`,{cause:{options:{from:l}}})});let p=c[r].forceTo??t.forceTo,d=c[r].to??t.to,m=p?d:n(d);if(null===m)return new Promise(()=>{throw Error(`To language ${d} unsupported, bypass this with setting forceTo to true if you're certain the iso is correct`,{cause:{options:{to:d}}})});let g=c[r].autoCorrect??t.autoCorrect;if(0===o.length){let t=new i(o);t.text=o,t.from=u,t.to=m,Array.isArray(e)?h[r]=t:"object"==typeof e?h[Object.keys(e)[r]]=t:h=t;continue}let b=[a,JSON.stringify([[o,u,m,g],[null]]),null,r.toString(36)];f.push(b)}return 0===f.length?new Promise(e=>{e(h)}):(u.body="f.req="+encodeURIComponent(JSON.stringify([f]))+"&",t.requestFunction(l,u).then(async a=>{if(!a.ok)throw Error(a.statusText,{cause:{options:t,url:l,response:a}});for(let r of(a=(a=await a.text()).slice(6)).split("\n"))if("["===r[0]&&"e"!==r[3])for(let a of r=JSON.parse(r)){if("wrb.fr"!==a[0])continue;let r=parseInt(a[a.length-1],36);if(null===a[2]){if(!t.rejectOnPartialFail){Array.isArray(e)?h[r]=null:"object"==typeof e?h[Object.keys(e)[r]]=null:h=null;continue}throw Error("Partial Translation Request Fail: at least one translation failed, it was either invalid or more likely- rejected by the server.  You can try the request again and if it persists try a proxy, spacing out requests, and/or using a different tld.  If you would like to translate other requests in a batch translation even if one fails(the failed translation will be set to `null`) pass the option `rejectOnPartialFail: false`.  You can also try using the singleTranslate endpoint with: `forceBatch: false`",{cause:{input:e,url:l,options:t,requestOptions:u}})}let o=new i(a=JSON.parse(a[2]));if(void 0===a[1][0][0][5]||null===a[1][0][0][5]?o.text=a[1][0][0][0]:o.text=a[1][0][0][5].map(function(e){return e[0]}).filter(Boolean).join(" "),o.pronunciation=a[1][0][0][1]??void 0,o.from.language.didYouMean=!0,a[0]&&a[0][1]&&a[0][1][1]?(o.from.language.didYouMean=!0,o.from.language.iso=a[0][1][1][0]):"auto"===a[1][3]?o.from.language.iso=a[2]:o.from.language.iso=a[1][3],o.from.text.autoCorrected=!1,o.from.text.didYouMean=!1,a[0]&&a[0][1]&&a[0][1][0]){let e=a[0][1][0][0][1];e=(e=e.replace(/<b>(<i>)?/g,"[")).replace(/(<\/i>)?<\/b>/g,"]"),o.from.text.value=e,1===a[0][1][0][2]?o.from.text.autoCorrected=!0:o.from.text.didYouMean=!0}Array.isArray(e)?h[r]=o:"object"==typeof e?h[Object.keys(e)[r]]=o:h=o}return h}))}},2218:(e,t,a)=>{let{DEFAULT_OPTIONS:r}=a(9681),o=a(7649);e.exports=class{options;constructor(e){this.options={...r,...e}}translate(e,t){return o(e,t={...this.options,...t})}}},4887:(e,t,a)=>{let r=a(7649),o=a(2218),i=a(1977),n=a(2189),{langs:s,isSupported:l,getCode:u}=a(7806),c=a(6889);e.exports=r,e.exports.translate=r,e.exports.Translator=o,e.exports.singleTranslate=i,e.exports.batchTranslate=n,e.exports.languages=s,e.exports.isSupported=l,e.exports.getCode=u,e.exports.speak=c},5695:(e,t,a)=>{var r=a(8999);a.o(r,"useRouter")&&a.d(t,{useRouter:function(){return r.useRouter}})},6889:(e,t,a)=>{let{DEFAULT_OPTIONS:r,TRANSLATE_PATH:o}=a(9681),{getCode:i}=a(7806);e.exports=function(e,t){t={...r,...t};let a="jQ1olc",n=new URLSearchParams({rpcids:a,"source-path":"/","f.sid":"",bl:"",hl:"en-US","soc-app":1,"soc-platform":1,"soc-device":1,_reqid:Math.floor(1e3+9e3*Math.random()),rt:"c"}),s=o+t.tld+"/_/TranslateWebserverUi/data/batchexecute?"+n.toString(),l={...t.requestOptions,...r.requestOptions};l.method="POST",l.headers["Content-Type"]="application/x-www-form-urlencoded;charset=UTF-8";let u=Array.isArray(e)?e:"object"==typeof e?Object.values(e):[e],c=[];for(let e=0;e<u.length;e++){let r=u[e].text??u[e];if(r.length>200)return new Promise(()=>{throw Error("At least one of the inputs exceeded 200 characters, which is rejected by Google translate.  You should split it into a batch input with arrays/objects.",{cause:{input:{text:r}}})});let o=u[e].forceTo??t.forceTo,n=u[e].to??t.to,s=o?n:i(n);if(null===s)return new Promise(()=>{throw Error(`To language ${n} unsupported, bypass this with setting forceTo to true if you're certain the iso is correct`,{cause:{options:{to:n}}})});let l=[a,JSON.stringify([r,s,!0]),null,e.toString(36)];c.push(l)}return l.body="f.req="+encodeURIComponent(JSON.stringify([c]))+"&",t.requestFunction(s,l).then(async a=>{if(!a.ok)throw Error(a.statusText,{cause:{options:t,url:s,response:a}});a=(a=await a.text()).slice(6);let r=Array.isArray(e)?[]:"object"==typeof e?{}:void 0;for(let o of a.split("\n"))if("["===o[0]&&"e"!==o[3])for(let a of o=JSON.parse(o)){if("wrb.fr"!==a[0])continue;let o=parseInt(a[a.length-1],36);if(null===a[2]&&t.rejectOnPartialFail)throw Error("Partial TTS Request Fail: at least one TTS request failed, it was either invalid or more likely- rejected by the server.  You can try the request again and if it persists try a proxy, spacing out requests, and/or using a different tld.  If you would like to still speak other requests in a batch speak request even if one fails(the failed TTS will be set to `null`) pass the option `rejectOnPartialFail: false`",{cause:{input:e,url:s,options:t,requestOptions:l}});let i=null!==a[2]?JSON.parse(a[2])[0]:null;Array.isArray(e)?r[o]=i:"object"==typeof e?r[Object.keys(e)[o]]=i:r=i}return r})}},7649:(e,t,a)=>{let{DEFAULT_OPTIONS:r}=a(9681),o=a(2189),i=a(1977);e.exports=function(e,t){return(t={...r,...t},"string"!=typeof e||t.forceBatch)?o(e,t):i(e,t).catch(a=>{if(t.fallbackBatch)return o(e,t);throw a})}},7806:e=>{let t={auto:"Detect language",auto:"Automatic",ab:"Abkhaz",ace:"Acehnese",ach:"Acholi",aa:"Afar",af:"Afrikaans",sq:"Albanian",alz:"Alur",am:"Amharic",ar:"Arabic",hy:"Armenian",as:"Assamese",av:"Avar",awa:"Awadhi",ay:"Aymara",az:"Azerbaijani",ban:"Balinese",bal:"Baluchi",bm:"Bambara",bci:"Baoul\xe9",ba:"Bashkir",eu:"Basque",btx:"Batak Karo",bts:"Batak Simalungun",bbc:"Batak Toba",be:"Belarusian",bem:"Bemba",bn:"Bengali",bew:"Betawi",bho:"Bhojpuri",bik:"Bikol",bs:"Bosnian",br:"Breton",bg:"Bulgarian",bua:"Buryat",yue:"Cantonese",ca:"Catalan",ceb:"Cebuano",ch:"Chamorro",ce:"Chechen",ny:"Chichewa","zh-CN":"Chinese (Simplified)","zh-TW":"Chinese (Traditional)",chk:"Chuukese",cv:"Chuvash",co:"Corsican",crh:"Crimean Tatar (Cyrillic)","crh-Latn":"Crimean Tatar (Latin)",hr:"Croatian",cs:"Czech",da:"Danish","fa-AF":"Dari",dv:"Dhivehi",din:"Dinka",doi:"Dogri",dov:"Dombe",nl:"Dutch",dyu:"Dyula",dz:"Dzongkha",en:"English",eo:"Esperanto",et:"Estonian",ee:"Ewe",fo:"Faroese",fj:"Fijian",tl:"Filipino",fi:"Finnish",fon:"Fon",fr:"French","fr-CA":"French (Canada)",fy:"Frisian",fur:"Friulian",ff:"Fulani",gaa:"Ga",gl:"Galician",ka:"Georgian",de:"German",el:"Greek",gn:"Guarani",gu:"Gujarati",ht:"Haitian Creole",cnh:"Hakha Chin",ha:"Hausa",haw:"Hawaiian",he:"Hebrew",iw:"Hebrew",hil:"Hiligaynon",hi:"Hindi",hmn:"Hmong",hu:"Hungarian",hrx:"Hunsrik",iba:"Iban",is:"Icelandic",ig:"Igbo",ilo:"Ilocano",id:"Indonesian","iu-Latn":"Inuktut (Latin)",iu:"Inuktut (Syllabics)",ga:"Irish",it:"Italian",jam:"Jamaican Patois",ja:"Japanese",jw:"Javanese",kac:"Jingpo",kl:"Kalaallisut",kn:"Kannada",kr:"Kanuri",pam:"Kapampangan",kk:"Kazakh",kha:"Khasi",km:"Khmer",cgg:"Kiga",kg:"Kikongo",rw:"Kinyarwanda",ktu:"Kituba",trp:"Kokborok",kv:"Komi",gom:"Konkani",ko:"Korean",kri:"Krio",ku:"Kurdish (Kurmanji)",ckb:"Kurdish (Sorani)",ky:"Kyrgyz",lo:"Lao",ltg:"Latgalian",la:"Latin",lv:"Latvian",lij:"Ligurian",li:"Limburgish",ln:"Lingala",lt:"Lithuanian",lmo:"Lombard",lg:"Luganda",luo:"Luo",lb:"Luxembourgish",mk:"Macedonian",mad:"Madurese",mai:"Maithili",mak:"Makassar",mg:"Malagasy",ms:"Malay","ms-Arab":"Malay (Jawi)",ml:"Malayalam",mt:"Maltese",mam:"Mam",gv:"Manx",mi:"Maori",mr:"Marathi",mh:"Marshallese",mwr:"Marwadi",mfe:"Mauritian Creole",chm:"Meadow Mari","mni-Mtei":"Meiteilon (Manipuri)",min:"Minang",lus:"Mizo",mn:"Mongolian",my:"Myanmar (Burmese)",nhe:"Nahuatl (Eastern Huasteca)","ndc-ZW":"Ndau",nr:"Ndebele (South)",new:"Nepalbhasa (Newari)",ne:"Nepali","bm-Nkoo":"NKo",no:"Norwegian",nus:"Nuer",oc:"Occitan",or:"Odia (Oriya)",om:"Oromo",os:"Ossetian",pag:"Pangasinan",pap:"Papiamento",ps:"Pashto",fa:"Persian",pl:"Polish",pt:"Portuguese",pt:"Portuguese (Brazil)","pt-PT":"Portuguese (Portugal)",pa:"Punjabi",pa:"Punjabi (Gurmukhi)","pa-Arab":"Punjabi (Shahmukhi)",qu:"Quechua",kek:"Qʼeqchiʼ",rom:"Romani",ro:"Romanian",rn:"Rundi",ru:"Russian",se:"Sami (North)",sm:"Samoan",sg:"Sango",sa:"Sanskrit","sat-Latn":"Santali (Latin)",sat:"Santali (Ol Chiki)",gd:"Scots Gaelic",nso:"Sepedi",sr:"Serbian",st:"Sesotho",crs:"Seychellois Creole",shn:"Shan",sn:"Shona",scn:"Sicilian",szl:"Silesian",sd:"Sindhi",si:"Sinhala",sk:"Slovak",sl:"Slovenian",so:"Somali",es:"Spanish",su:"Sundanese",sus:"Susu",sw:"Swahili",ss:"Swati",sv:"Swedish",ty:"Tahitian",tg:"Tajik","ber-Latn":"Tamazight",ber:"Tamazight (Tifinagh)",ta:"Tamil",tt:"Tatar",te:"Telugu",tet:"Tetum",th:"Thai",bo:"Tibetan",ti:"Tigrinya",tiv:"Tiv",tpi:"Tok Pisin",to:"Tongan",lua:"Tshiluba",ts:"Tsonga",tn:"Tswana",tcy:"Tulu",tum:"Tumbuka",tr:"Turkish",tk:"Turkmen",tyv:"Tuvan",ak:"Twi",udm:"Udmurt",uk:"Ukrainian",ur:"Urdu",ug:"Uyghur",uz:"Uzbek",ve:"Venda",vec:"Venetian",vi:"Vietnamese",war:"Waray",cy:"Welsh",wo:"Wolof",xh:"Xhosa",sah:"Yakut",yi:"Yiddish",yo:"Yoruba",yua:"Yucatec Maya",zap:"Zapotec",zu:"Zulu"};function a(e){return"string"!=typeof e?null:t[e]?e:Object.keys(t).filter(function(a){return"string"==typeof t[a]&&t[a].toLowerCase()===e.toLowerCase()})[0]??null}e.exports={langs:t,isSupported:function(e){return null!==a(e)},getCode:a}},9681:e=>{let t={from:"auto",to:"en",autoCorrect:!1,tld:"com",requestFunction:(e,t)=>fetch(e,t),requestOptions:{credentials:"omit",headers:{}},fallbackBatch:!0,forceBatch:!0,forceFrom:!1,forceTo:!1,rejectOnPartialFail:!0};Object.freeze(t.requestOptions),Object.freeze(t),e.exports={DEFAULT_OPTIONS:t,TRANSLATE_PATH:"https://translate.google."}}}]);